<?php

/**
 * @file
 * Hp_programs_feed module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function hp_programs_feed_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hp_programs_feed':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * @param $variables
 *   This sets variables for getting events, and which are then passed to JS.
 */
function hp_programs_feed_preprocess_paragraph__hp_programs_feed(&$variables) {

  // Check on env to get events from.
  $env = 'prod';
  if (isset($variables['elements']['#paragraph']->field_hp_pgf_environment->value)) {
    $env = $variables['elements']['#paragraph']->field_hp_pgf_environment->value;
  }
  $variables['hp_pgf_env_url'] = $env;

  // Check on Degree Classifications filter.
  $degree_classification = NULL;
  if (isset($variables['elements']['#paragraph']->field_hp_pgf_degree_classificati->value)) {
    $degree_classification = $variables['elements']['#paragraph']->field_hp_pgf_degree_classificati->value;
    // Decode string workaround due to bug in core or external_data_source.
    $degree_classification = str_replace('id=', '', $degree_classification);
  }
  $variables['hp_pgf_degree'] = $degree_classification;

  // Check on schools filter.
  $school = NULL;
  if (isset($variables['elements']['#paragraph']->field_hp_pgf_school->value)) {
    $school = $variables['elements']['#paragraph']->field_hp_pgf_school->value;
    // Decode string workaround due to bug in core or external_data_source.
    $school = str_replace('id=', '', $school);
  }
  $variables['hp_pgf_school'] = $school;

  // Check on subject filter.
  $subject = NULL;
  if (isset($variables['elements']['#paragraph']->field_hp_pgf_subject->value)) {
    $subject = $variables['elements']['#paragraph']->field_hp_pgf_subject->value;
    // Decode string workaround due to bug in core or external_data_source.
    $subject = str_replace('id=', '', $subject);
  }
  $variables['hp_pgf_subject'] = $subject;

}

/**
 * Implements hook_theme().
 *
 * Lets us define our paragraphs templates in this module.
 */
function hp_programs_feed_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__hp_programs_feed' => [
      'base hook' => 'paragraph',
    ],
  ];
}
