<?php

/**
 * @file
 * Hp_callout module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media\Entity\Media;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function hp_callout_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hp_callout':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * @param $variables
 *   This sets url for image.
 */
function hp_callout_preprocess_paragraph__hp_callout(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  // Get media image URL.
  if ($paragraph->hasField('field_hp_call_background')) {
    $bkrd_image = $paragraph->get('field_hp_call_background')->getValue();
    if ($bkrd_image && !empty($bkrd_image)) {
      $entity = Media::load($bkrd_image[0]['target_id']);
      if (isset($entity->field_media_image->entity)) {
        $variables['hp_call_image'] = \Drupal::service('file_url_generator')->generateAbsoluteString($entity->field_media_image->entity->getFileUri());
        $variables['hp_call_image_alt'] = $entity->field_media_image->alt;
      }
    }
  }

  // Get layout.
  $feed_type = $variables['elements']['#paragraph']->field_hp_call_display_type->value;
  $variables['hp_call_type'] = $feed_type;

}

/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function hp_callout_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__hp_callout' => [
      'base hook' => 'paragraph',
    ],
  ];
}
