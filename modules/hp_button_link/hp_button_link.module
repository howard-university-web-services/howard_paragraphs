<?php

/**
 * @file
 * ip_button_link module file.
 */

 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\paragraphs\Entity\Paragraph;

 /**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function hp_button_link_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hp_button_link':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 * @param $variables
 * This sets classes needed for the button/link type.
 */
function hp_button_link_preprocess_paragraph__ip_button_link(&$variables) {
    // Set classes for link type
    $type = $variables['elements']['#paragraph']->field_ip_bl_type->value;
    $variables['ip_bl_type'] = $type;
  }

 /**
  * Implements hook_theme().
  * Lets us define our paragraphs templates in this module.
  */
 function hp_button_link_theme($existing, $type, $theme, $path) {
   return [
     'paragraph__ip_button_link' => [
       'base hook' => 'paragraph',
     ]
   ];
 }
