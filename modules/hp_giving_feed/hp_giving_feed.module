<?php

/**
 * @file
 * Hp_giving_feed module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function hp_giving_feed_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.hp_giving_feed':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      } else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * @param $variables
 *   This sets variables for getting events, and then gets events.
 */
function hp_giving_feed_preprocess_paragraph__hp_giving_feed(&$variables)
{
  // UUID to pass for cache.
  $uuid = $variables['elements']['#paragraph']->uuid->value;

  // Check on env to get events from.
  $env = $variables['elements']['#paragraph']->field_hp_gf_environment->value;
  $env_url = 'https://giving.howard.edu';
  if ($env == 'stg') {
    $env_url = 'https://stg.giving.howard.edu';
  } elseif ($env == 'dev') {
    $env_url = 'https://dev.giving.howard.edu';
  }
  $variables['hp_gf_env_url'] = $env_url;
  $variables['hp_gf_default_image'] = '/' . \Drupal::service('extension.path.resolver')->getPath('module', 'hp_giving_feed') . '/assets/hp_giving_feed_default.jpg';

  // Check on categories filter.
  $category = NULL;
  if (isset($variables['elements']['#paragraph']->field_hp_gf_dg_category->value)) {
    $category = $variables['elements']['#paragraph']->field_hp_gf_dg_category->value;
    // Decode string workaround due to bug in core or external_data_source.
    $category = str_replace('id=', '', $category);
  }

  // Get the desired type of feed.
  $feed_type = $variables['elements']['#paragraph']->field_hp_gf_feed_type->value;
  $variables['hp_gf_type'] = $feed_type;

  if ($feed_type == 'three_w_images') {
    $variables['hp_gf_giving'] = \Drupal::service('howard.giving')->getArticles($env_url, $category, 3, $uuid);
  } elseif ($feed_type == 'one_featured') {
    $variables['hp_gf_giving'] = \Drupal::service('howard.giving')->getArticles($env_url, $category,  1, $uuid);
  }
}

/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function hp_giving_feed_theme($existing, $type, $theme, $path)
{
  return [
    'paragraph__hp_giving_feed' => [
      'base hook' => 'paragraph',
    ],
  ];
}

function hp_giving_feed_update_8001()
{
  \Drupal::service('config.installer')->installDefaultConfig('module', 'hp_giving_feed');
  // Remove admin category field.
  if (FieldConfig::loadByName('paragraph', 'hp_giving_feed', 'field_hp_gf_giving_admin_category') !== NULL ) {
    FieldConfig::loadByName('paragraph', 'hp_giving_feed', 'field_hp_gf_giving_admin_category')->delete();
  }
  // Remove category field.
  if (FieldConfig::loadByName('paragraph', 'hp_giving_feed', 'field_hp_gf_giving_category') !== NULL ) {
    FieldConfig::loadByName('paragraph', 'hp_giving_feed', 'field_hp_gf_giving_category')->delete();
  }
}
